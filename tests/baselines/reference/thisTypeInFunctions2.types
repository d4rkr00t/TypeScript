=== tests/cases/conformance/types/thisType/thisTypeInFunctions2.ts ===
interface Arguments {
>Arguments : Arguments

    init?: (this: void) => void;
>init : (this: void) => void
>this : void

    willDestroy?: (this: any) => void;
>willDestroy : (this: any) => void
>this : any

    [propName: string]: number | string | boolean | symbol | undefined | null | {} | ((this: any, ...args:any[]) => any);
>propName : string
>null : null
>this : any
>args : any[]
}
declare function extend(arguments: Arguments): void;
>extend : (arguments: Arguments) => void
>arguments : Arguments
>Arguments : Arguments

class Mixin {
>Mixin : Mixin

    stuff: number;
>stuff : number
}

extend({
>extend({    init() {        this    },    mine: 12,    bar() {        this.init();    },    foo() {        this.bar;        this.url        this.handler()        this.baz        this.willDestroy    }}) : void
>extend : (arguments: Arguments) => void
>{    init() {        this    },    mine: 12,    bar() {        this.init();    },    foo() {        this.bar;        this.url        this.handler()        this.baz        this.willDestroy    }} : { init(): void; mine: number; bar(): void; foo(): void; }

    init() {
>init : () => void

        this
>this : void

    },
    mine: 12,
>mine : number
>12 : number

    bar() {
>bar : () => void

        this.init();
>this.init() : any
>this.init : any
>this : any
>init : any

    },
    foo() {
>foo : () => void

        this.bar;
>this.bar : any
>this : any
>bar : any

        this.url
>this.url : any
>this : any
>url : any

        this.handler()
>this.handler() : any
>this.handler : any
>this : any
>handler : any

        this.baz
>this.baz : any
>this : any
>baz : any

        this.willDestroy
>this.willDestroy : any
>this : any
>willDestroy : any
    }
})

