=== tests/cases/conformance/types/thisType/thisTypeInFunctions2.ts ===
interface Arguments {
>Arguments : Symbol(Arguments, Decl(thisTypeInFunctions2.ts, 0, 0))

    init?: (this: void) => void;
>init : Symbol(Arguments.init, Decl(thisTypeInFunctions2.ts, 0, 21))
>this : Symbol(this, Decl(thisTypeInFunctions2.ts, 1, 12))

    willDestroy?: (this: any) => void;
>willDestroy : Symbol(Arguments.willDestroy, Decl(thisTypeInFunctions2.ts, 1, 32))
>this : Symbol(this, Decl(thisTypeInFunctions2.ts, 2, 19))

    [propName: string]: number | string | boolean | symbol | undefined | null | {} | ((this: any, ...args:any[]) => any);
>propName : Symbol(propName, Decl(thisTypeInFunctions2.ts, 3, 5))
>this : Symbol(this, Decl(thisTypeInFunctions2.ts, 3, 87))
>args : Symbol(args, Decl(thisTypeInFunctions2.ts, 3, 97))
}
declare function extend(arguments: Arguments): void;
>extend : Symbol(extend, Decl(thisTypeInFunctions2.ts, 4, 1))
>arguments : Symbol(arguments, Decl(thisTypeInFunctions2.ts, 5, 24))
>Arguments : Symbol(Arguments, Decl(thisTypeInFunctions2.ts, 0, 0))

class Mixin {
>Mixin : Symbol(Mixin, Decl(thisTypeInFunctions2.ts, 5, 52))

    stuff: number;
>stuff : Symbol(Mixin.stuff, Decl(thisTypeInFunctions2.ts, 6, 13))
}

extend({
>extend : Symbol(extend, Decl(thisTypeInFunctions2.ts, 4, 1))

    init() {
>init : Symbol(init, Decl(thisTypeInFunctions2.ts, 10, 8))

        this
    },
    mine: 12,
>mine : Symbol(mine, Decl(thisTypeInFunctions2.ts, 13, 6))

    bar() {
>bar : Symbol(bar, Decl(thisTypeInFunctions2.ts, 14, 13))

        this.init();
    },
    foo() {
>foo : Symbol(foo, Decl(thisTypeInFunctions2.ts, 17, 6))

        this.bar;
        this.url
        this.handler()
        this.baz
        this.willDestroy
    }
})

